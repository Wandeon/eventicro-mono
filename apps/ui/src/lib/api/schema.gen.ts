/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Service health and version */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events (cursor-paginated)
         * @description Returns upcoming events ordered by `(start_time ASC, id ASC)` with **stable cursor pagination**.
         *     Text search (`q`) matches on title and description (FTS), optionally filtered by
         *     geographic radius (`lat`,`lng`,`radius_km`).
         *
         */
        get: operations["listEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single event */
        get: operations["getEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch ingest ProcessedEvents (trusted jobs) */
        post: operations["ingest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Public submission (moderation queue) */
        post: operations["submit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/geocode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server-mediated geocoding (Nominatim proxy) */
        get: operations["geocode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reverse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server-mediated reverse geocoding (Nominatim proxy) */
        get: operations["reverseGeocode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List submissions for moderation */
        get: operations["listSubmissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/submissions/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve a submission and promote to normalized tables */
        post: operations["approveSubmission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/submissions/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject a submission */
        post: operations["rejectSubmission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read feature flags (public read-only) */
        get: operations["listFlags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/feature-flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List feature flags (admin) */
        get: operations["listFeatureFlags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/feature-flags/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upsert a feature flag (admin) */
        put: operations["upsertFeatureFlag"];
        post?: never;
        /** Delete a feature flag (admin) */
        delete: operations["deleteFeatureFlag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /**
             * @example ok
             * @enum {string}
             */
            status: "ok" | "degraded";
            /** @example 1.0.0 */
            version: string;
            /** @example 1a2b3c4d */
            git_sha: string;
        };
        Error: {
            /** @example BadRequest */
            error: string;
            /** @example Invalid parameters */
            message: string;
            /** @example 400 */
            code?: number;
            details?: {
                [key: string]: unknown;
            } | null;
        };
        Event: {
            id: string;
            title: string;
            description?: string | null;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time?: string | null;
            city?: string | null;
            venue_id?: string | null;
            organizer_id?: string | null;
            /** Format: uri */
            url?: string | null;
            /** Format: uri */
            image_url?: string | null;
            price?: string | null;
            /** @default false */
            verified: boolean;
        };
        EventListResponse: {
            items: components["schemas"]["Event"][];
            next_cursor: string | null;
        };
        ProcessedEvent: {
            source?: string | null;
            source_id?: string | null;
            title: string;
            description?: string | null;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time?: string | null;
            venue_name?: string | null;
            address?: string | null;
            city?: string | null;
            /** Format: double */
            lat?: number | null;
            /** Format: double */
            lng?: number | null;
            organizer_name?: string | null;
            /** Format: uri */
            url?: string | null;
            /** Format: uri */
            image_url?: string | null;
            price?: string | null;
            category?: string | null;
        };
        IngestResult: {
            /** @enum {string} */
            status: "inserted" | "updated" | "skipped" | "failed";
            id?: string | null;
            message?: string | null;
        };
        SubmissionRequest: {
            title: string;
            description?: string | null;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time?: string | null;
            venue_name?: string | null;
            address?: string | null;
            city?: string | null;
            /** Format: double */
            lat?: number | null;
            /** Format: double */
            lng?: number | null;
            organizer_name?: string | null;
            /** Format: uri */
            url?: string | null;
            /** Format: uri */
            image_url?: string | null;
            price?: string | null;
            captcha_token: string;
            honeypot?: string | null;
        };
        Submission: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            status: "pending" | "approved" | "rejected";
            /** Format: date-time */
            created_at: string;
            reviewer?: string | null;
            /** Format: date-time */
            reviewed_at?: string | null;
            reason?: string | null;
            payload?: {
                [key: string]: unknown;
            };
        };
        FeatureFlag: {
            key: string;
            enabled: boolean;
            description?: string | null;
        };
        GeocodeResult: {
            display_name?: string;
            /** Format: double */
            lat?: number;
            /** Format: double */
            lon?: number;
            boundingbox?: number[];
        };
        ReverseResult: {
            display_name?: string;
            address?: {
                [key: string]: unknown;
            };
        };
    };
    responses: {
        /** @description Missing or invalid credentials */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Free-text query (FTS on title/description) */
        q: string;
        /** @description Opaque cursor for stable pagination */
        cursor: string | null;
        /** @description Page size (max 50) */
        limit: number;
        /** @description Include events starting at or after this ISO timestamp */
        startTimeFrom: string;
        /** @description Include events starting at or before this ISO timestamp */
        startTimeTo: string;
        /** @description Case-insensitive filter by city name */
        city: string;
        /** @description Filter by category slug or id */
        category: string;
        /** @description Latitude used with `lng` and `radius_km` */
        lat: number;
        /** @description Longitude used with `lat` and `radius_km` */
        lng: number;
        /** @description Search radius in kilometers (Haversine) */
        radius_km: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description One or more dependencies failed quick checks */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listEvents: {
        parameters: {
            query?: {
                /** @description Free-text query (FTS on title/description) */
                q?: components["parameters"]["q"];
                /** @description Opaque cursor for stable pagination */
                cursor?: components["parameters"]["cursor"];
                /** @description Page size (max 50) */
                limit?: components["parameters"]["limit"];
                /** @description Include events starting at or after this ISO timestamp */
                start_time_from?: components["parameters"]["startTimeFrom"];
                /** @description Include events starting at or before this ISO timestamp */
                start_time_to?: components["parameters"]["startTimeTo"];
                /** @description Case-insensitive filter by city name */
                city?: components["parameters"]["city"];
                /** @description Filter by category slug or id */
                category?: components["parameters"]["category"];
                /** @description Latitude used with `lng` and `radius_km` */
                lat?: components["parameters"]["lat"];
                /** @description Longitude used with `lat` and `radius_km` */
                lng?: components["parameters"]["lng"];
                /** @description Search radius in kilometers (Haversine) */
                radius_km?: components["parameters"]["radius_km"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A page of events with a cursor for the next page (if any) */
            200: {
                headers: {
                    /** @description Hourly quota for this endpoint */
                    "X-RateLimit-Limit"?: number;
                    /** @description Remaining requests in the current window */
                    "X-RateLimit-Remaining"?: number;
                    /** @description Seconds until the current window resets */
                    "X-RateLimit-Reset"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventListResponse"];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    /** @description Seconds until a new request is permitted */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    ingest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProcessedEvent"][];
            };
        };
        responses: {
            /** @description Per-item ingest result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IngestResult"][];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    submit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmissionRequest"];
            };
        };
        responses: {
            /** @description Accepted and queued for moderation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        submission_id: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Captcha failure or not verified */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    /** @description Seconds until a new request is permitted */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    geocode: {
        parameters: {
            query: {
                q: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    /** @description Requests allowed in the current window */
                    "X-RateLimit-Limit"?: number;
                    /** @description Requests remaining in the current window */
                    "X-RateLimit-Remaining"?: number;
                    /** @description Seconds until the window resets */
                    "X-RateLimit-Reset"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeocodeResult"][];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    /** @description Seconds until a new request is permitted */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    reverseGeocode: {
        parameters: {
            query: {
                lat: number;
                lon: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    /** @description Requests allowed in the current window */
                    "X-RateLimit-Limit"?: number;
                    /** @description Requests remaining in the current window */
                    "X-RateLimit-Remaining"?: number;
                    /** @description Seconds until the window resets */
                    "X-RateLimit-Reset"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReverseResult"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    /** @description Seconds until a new request is permitted */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listSubmissions: {
        parameters: {
            query?: {
                status?: "pending" | "approved" | "rejected";
                q?: string;
                /** @description Opaque cursor for stable pagination */
                cursor?: components["parameters"]["cursor"];
                /** @description Page size (max 50) */
                limit?: components["parameters"]["limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of submissions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Submission"][];
                        next_cursor: string | null;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    approveSubmission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Approved with promoted event id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        promoted_event_id: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    rejectSubmission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    reason?: string;
                };
            };
        };
        responses: {
            /** @description Rejected */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    listFlags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current flags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureFlag"][];
                };
            };
        };
    };
    listFeatureFlags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Flags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureFlag"][];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    upsertFeatureFlag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    enabled: boolean;
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Upserted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureFlag"];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    deleteFeatureFlag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
        };
    };
}
