name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: eventicro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install app dependencies
      run: |
        cd apps/ui && npm ci
        cd ../api && npm ci
    
    - name: Run tests (UI)
      working-directory: apps/ui
      run: npm test
      env:
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/eventicro_test
    
    - name: Run tests (API)
      working-directory: apps/api
      run: npm test
      env:
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/eventicro_test
        JWT_SECRET: test-secret
    
    - name: Run linting (UI)
      working-directory: apps/ui
      run: npm run lint
    
    - name: Run linting (API)
      working-directory: apps/api
      run: npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push UI image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/ui
        file: ./apps/ui/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ui:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/api
        file: ./apps/api/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to VPS-01
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_01_HOST }}
        username: ${{ secrets.VPS_01_USER }}
        key: ${{ secrets.VPS_01_SSH_KEY }}
        script: |
          cd /opt/eventicro-mono
          git pull origin main
          docker-compose -f infra/core/compose.yml pull
          docker-compose -f infra/core/compose.yml up -d
          docker-compose -f infra/automations/compose.yml pull
          docker-compose -f infra/automations/compose.yml up -d
          systemctl restart eventicro-ui.service
          systemctl restart eventicro-api.service
    
    - name: Deploy to GPU-01
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.GPU_01_HOST }}
        username: ${{ secrets.GPU_01_USER }}
        key: ${{ secrets.GPU_01_SSH_KEY }}
        script: |
          cd /opt/eventicro-mono
          git pull origin main
          docker-compose -f infra/core/compose.yml pull
          docker-compose -f infra/core/compose.yml up -d
          systemctl restart eventicro-ui.service
          systemctl restart eventicro-api.service

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Discord notification here
    
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Discord notification here
