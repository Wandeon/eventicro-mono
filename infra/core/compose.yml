services:
  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    ports: ["127.0.0.1:6379:6379"]
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  tileserver:
    image: maptiler/tileserver-gl:v5.3.1
    command: ["--port", "8081", "--public_url", "${TILESERVER_PUBLIC_URL:-}"]
    volumes:
      - ./tiles:/data
    ports:
      - "127.0.0.1:8081:8081"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nominatim:
    image: mediagis/nominatim:4.4
    environment:
      PBF_URL: ${NOMINATIM_PBF_URL}
      NOMINATIM_PASSWORD: ${NOMINATIM_PASSWORD}
      THREADS: 4
    shm_size: 1gb
    volumes:
      - nominatim-data:/var/lib/postgresql/14/main
    ports:
      - "127.0.0.1:8070:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s

  uptime-kuma:
    image: louislam/uptime-kuma:1
    volumes:
      - uptime-data:/app/data
    ports:
      - "127.0.0.1:3002:3001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:16
    command:
      - "postgres"
      - "-c"
      - "listen_addresses=127.0.0.1"
      - "-c"
      - "wal_level=replica"
      - "-c"
      - "archive_mode=on"
      - "-c"
      - "archive_timeout=60s"
      - "-c"
      - "archive_command=/usr/local/bin/wal-g wal-push %p"
      - "-c"
      - "restore_command=/usr/local/bin/wal-g wal-fetch %f %p"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=256MB"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: eventicro
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      AWS_S3_FORCE_PATH_STYLE: ${AWS_S3_FORCE_PATH_STYLE}
      WALG_S3_PREFIX: ${WALG_S3_PREFIX}
    volumes:
      - pg-a5-data:/var/lib/postgresql/data
      - /srv/walg/bin/wal-g:/usr/local/bin/wal-g:ro
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  pg-a5-data: {}
  redis-data: {}
  minio-data: {}
  nominatim-data: {}
  uptime-data: {}

